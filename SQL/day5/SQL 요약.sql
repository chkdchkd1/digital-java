-- 트리거와 프로시저
	# 트리거 : 어렵다, 데이터의 무결성을 지킬 수 있다. 데이터의 일관성을 유지할 수 있다. 
		-- 데이터의 무결성을 지키기 위해서 트리거 실행 후 추가적인 작업을 하지 않아도 된다 .
        -- 또한 이벤트가 실행될때 자동으로 실행된다.
    # 프로시저 : 이벤트가 발생 했을 때 해당 이벤트를 안정적으로 동작할 수 있게 만들 수 있다. 
		-- 필요할 때 호출, 함수 
		-- 이벤트가 발생했을 때 에러가 발생할 수 있다.
		-- > insert의 경우 : 입력된 데이터 중 외래키가 있는 경우 해당 외래키는 다른 테이블에 있는 기본키이어야 하는데 다른테이블에 해당 기본키가 없는 경우 
        -- > update 경우 : 수정하려는 속성이 외래키인 경우 다른 테이블에 있는 기본키로 수정해야하는데 없는 값으로 수정하려는 경우 
        -- > delete의 경우 : 삭제하려는 데이터의 기본키가 다른 테이블의 외래키로 써있는 경우 
	# 테이블 A에서 이벤트가 발생해서 처리를 해야하는데 처리해야하는 테이블이 A인 경우 프로시저를 사용해야한다.
    # 트리거는 attend 테이블에서 이벤트가 발생 할 때 실행되는 테이블이기 때문에 트리거 안에서 attend 테이블을 수정 할 수 없다.
    
    
-- DDL : 스키마/테이블을 추가,수정,삭제 
	# CREATE,ALTER,DROP,TRUNCATE
-- DML : 데이터를 검색/추가/수정/삭제 
	# SELECT,INSERT,UPDATE,DELETE
    -- select 속성 from 테이블 where 조건;
    -- select 속성 from 테이블 A join 테이블 B on 속성 a = 속성 b where 조건;
    -- insert into 테이블명[(속성1,속성2)] values (값1,값2) 
    -- update 테이블명 set 속성1 = 값1,  속성2 = 값2 where 조건;
-- DCL : 사용자 권한설정과 같은 제어부분 
#
-- ERD 생성 (이거 포토폴리용꺼 미리 작성해놓기) 
-- DB / 테이블 생성
-- 데이터 추가
-- select 연습 
-- 트리거, 프로시저 
-- 내부함수 (ex, sum, count, concat) 

-- > 검색
 # 정렬 : order by 속성명 asc / desc
 # 갯수 제한 : limit 시작번지, 갯수 
	-- > 예시 : 검색 결과에서 한 페이지에서 10개씩 보여주는 경우 
		-- 1페이지의 결과물을 가져오려면 : limit 0,10
        -- 2페이지의 결과물을 가져오려면 : limit 10,10
        -- 3페이지의 결과물을 가져오려면 : limit 20,10 
        