
5 > 12> 13 > 22 >23 > 17> 18 >  23 > 13 > 14> 15 


 5 > 7 > 
11 (num = 5) > 12> 14>17 (num = 4일 때 팩토리얼 호출) >
11 (num = 4) > 12> 14>17 (num = 3일 때 팩토리얼 호출)> 
11 (num = 3) > 12> 14>17 (num = 2일 때 팩토리얼 호출)>
11 (num = 2) > 12> 14>17 (num = 1일 때 팩토리얼 호출)>
11 (num = 1) > 12> 13> 
17(1팩토리얼 매서드를 빠져 나와 2팩토리얼의 리턴으로 이동, n=2) >
17(2팩토리얼 매서드를 빠져 나와 2팩토리얼의 리턴으로 이동, n=3) >
17(3팩토리얼 매서드를 빠져 나와 2팩토리얼의 리턴으로 이동, n=4) >
17(4팩토리얼 매서드를 빠져 나와 2팩토리얼의 리턴으로 이동, n=5) > 
7(5팩토리얼의 값이 계산되어 나옴)  > 8


상속 - 부모 클래스한테 멤버변수나 멤버 메소드를 물려 받는 것 
키워드 : extends 
상속은 클래스 선언할 때 받는 것 

class 클래스명 extends 부모클래스 {
//멤버 변수
// 멤버 메서드
// 생성자 
}


//상속 받은 클래스는 부모의 클래스의 public 
또는 protected로 되어있는 멤버 변수와 멤버 메서드를 사용 할 수 있다. 

//생성자와 초기화 블럭은 상속 되지 않는다. 하지만 부모의 생성자를 호출 할 수는 있다. 
//부모는 1 명  가능 

// A는 B이다 => 성립, 말이되면 => 상속, B:부모 A자식
// A는 B를 가지고 있다 = > 성립 => 포함 A: 클래스 B: 멤버 변수 

원은 도형이다 = > 도형 : 부모, 원 : 자식
원은 점(중심)을 가지고 있다. => 원, 클래스 점: 멤버 변수 


 - 상속 과 포함의 차이 
상속의  자식이 사용할 수 없는 것 : private으로 된 멤버변수나 메서드
포함의 클래스가 멤버변수에서 사용 할 수 없는 것 :  private나 protexted로 메서드나 멤버변수 

상속은 멤버변수(일반변수)를 사용하기 위해 초기화를 하지 않아도 된다 .
포함에서 멤버 변수(객체)는 new를 이용하여 객체를 생성후 해당객체의 멤버변수(일반변수)를 사용 할 수 있다.

포함 : 클래스 A의 멤버변수로 클래스 B의 객체가 오는것 
child 클래스의 멤버변수로 Point 클래스의 객체 p1이 오는 것 

public  : 나 + 패키지 +자식 클래스들 +일반 클래스들
protected : 나 + 패키지 + 자식 클래스들 
(default) : 나 + 패키지
private : 나 

this()와 super()는 생성자 코드에서만 사용가능하다.
다른 메서드에서는 사용할 수 없다.

this는 내 객체정보 
this ()는 내 생성자
super는 부모 객체정보
super()는 부모 생성자 