
접근제한자 
 public : 누구나 사용가능
 private : 나만 사용 가능, 일반적으로 클래스에 붙이지는 않는다
 protected : 나 + 패키지 + 자식클래스  
 default : 나 + 패키지 (생략하면 기본으로 디폴트로 인식)  

메서드 - 기능 (만드는거 중요*)
접근제한자 (static) 리턴타입 메서드명(매개변수들){
		
		구현;
		return 값; 
}

음료수 자판기 	- 메서드
돈, 메뉴 		-매개변수
음료수 		- 리턴타입
매개변수 : 메서드를 실행하기 위해 필요한 최소한의 정보  (들어가는 변수가 일반변수 일수도 참조변수일수도 )
리턴타입 : 메서드 종료 후 알려주는 정보의 자료형

생성자 : 멤버변수 초기화 (메서드명 = 생성자의 클래스명)
// 기본생성자
public 클래스명(){

}

//생성자 오버로딩  : 
public 클래스명(매개변수){

}
     이름이 같은 메서드나 생성자가 존재 할 수 있다. 아래의 조건을 만족하면
	- 매개변수가 달라지는 경우
	   1.매개변수의 갯수가 달라지는 경우
               2. 매개변수의 타입이 달라지는 경우 

변수 
-일반변수 : 실제 사용하는 값을 저장하는 변수
-참조변수 : 주소를 저장하는 변수 => 누군가와 연결이 되어있음  ( 일반변수를 제외한 나머지 다 참조변수 , 클래스도)

클래스 변수(static) : 객체 생성 없이 사용 
클래스 메소드
- 클래스 메소드내에서 객체를 사용하지 않아도 (x=1이런거 )없이 사용 => 클래스명.메소드명()으로 사용 
- 클래스 메소드에는 객체 변수를 사용 할 수 없다.

- 클래스 메소드에는 객체 메서드를 사용 할 수 없다.  (만들어지기 전에 호출하려고하니까 ) 

멤버변수(객체변수): 객체를 생성해야 사용 가능 x=1 이렇게 해줘야 .
멤버 메서드 
 - 클래스 변수를 사용 할 수 있다. 




* * * * * *  *

객체 지향 프로그래밍
-무언가를 할 때 객체를 만들어서 하는것 

다음 중 어느 내용이 객체지향에 해당하는가?
1. 사진을 찍는다.
2. 카메라(객ㅊㅔ)의 사진찍는 기능을 이용하여 사진을 찍는다.

클래스 	제품설계도
객체 	제품 
메서드 	기능

- 클래스의 구성 요소 
1.멤버변수 : 속성 , 부품 
  - 객체 변수
  - 클래스 변수 
2.메서드 : 기능 
  - 객체 메서드
  - 클래스 메서드
3.생성자 : 초기화 
  - 기본
  - 오버로딩
 

클래스 :  아이폰 
   - 클래스 변수 (모두 공유, 공통으로 하는것) 제조사 
   - 객체 변수 고유기기번호 , 볼륨, 확인 밝기 , 배터리잔량 
    (따로 써야하는것, 내가 볼륨 올린다고 해서 다른 사람 아이폰의 볼륨도 올려야하는거 X) 

   - 클래스 메소드 : 제조사 확인, 아이폰 켰을 때 화면띄우기 (클래스 변수를 확인할때 주로 쓴다 )
   - 객체 메소드 :(사용자마다 다르게 설정할수있는 기능) 배경화면 설정 
   - 생성자 : 초기화 (공초) , 아이폰을 만들 때 색상을 정해서 만듦 (만들어 놓고 뒤늦게 칠하는게 아니라 만들때 칠하는것이라 ) 

  - 접근제한자 : 접근 할 수 있는지 여부를 결정하는 키워드를 작성 

public : 모두 사용 가능 
 - 클래스, 멤버 변수 , 메서드 에도 public을 붙일 수 있다 .
 - 클래스 : 항상 파일명과 클래스 명이 같을 때 
 - 멤버 변수 : 대체로 상수일 때 
 - 메서드 : 대부분의 메서드가 public

private : 해당 클래스만 사용 가능
 - 멤버 변수 : 대부분의 멤버 변수는 private 으로 사용 (메서드를 이용해서 간접으로 접근해야하기에 ) 
  ex) 자동차 속도를 올리기 위해서 내가 계기판을 올리는게 아니라 엑셀을 밟아야함(기능) 
 - 메서드 : 다른 클래스에서 사용하는 메서드가 아니라 내부에서 사용하는 메서드인 경우 ( 코드를 줄이기 위해서 
 , 여러 다른 클래스에 동일한 메서드를 가지고 있을때,  메서드빼서 private로 해서 호출하게끔 하는거 )

protected : 상속 받은 클래스 + 나 + 같은 패키지의 다른 클래스에서 사용가능  

() : default : 아무것도 안쓰면 ㅇㅇ , 나 + 같은 패키지 다른 클래스에서 사용가능 



클래스 생성방법 
- 접근제한자 class 클래스명 
	접근제한자 자료형 변수 ;// 멤버변수 
	접근제한자 static 자료형 변수명 ;// 클래스 변수 

	접근제한자 리턴타입 메서드명(매개변수){//객체 메서드 
	}
	접근제한자 static 리턴타입 메서드명(매개변수) {//클래스메서드
	}
	public 클래스명(){ //기본생산자 
	}
	public 클래스명(매개변수){ //생산자 오버로딩 
	}